A function f(n) is said to be growing faster than g(n) if
lim n-> infinite g(n)/f(n) = 0 (OR)   lim n-> infinite f(n)/g(n) = infinite

Assume g(n) = 1000 and f(n) = n + 1
In the above case, by the look of it we can say that f(n) is a bad code.
But just in case if the user does not provide a value more than 1000, then g(n) is a bad code.

In image IMG01 we can notice that function f(n) is quadratic equation and g(n) is a linear equation.

Direct way to find and compare growths:
1) Ignore lower order terms.
2) Ignore constants of leading terms.

Example:
    1) f(n) = 2n**2 + n + 6 ==> Order of Growth = n**2 (Quadratic).
    2) g(n) = 100n + 6 ==> Order of Growth = n (Linear).

How do we compare terms ?

c < log(log)n < log n < n**1/3 < n**1/2 < n < n**2 < n**3 < n**4 < 2**n < n**n.

Problem 1: 
f(n) = c1logn + c2
g(n) = c3n + c4log(log)n + c5

Solution: 
            f(n) = logn
            g(n) = n

    g(n) > f(n)

Problem 2: 
f(n) = c1n**2 + c2n + c3
g(n) = c4nlogn + c5n + c6

Solution: 
            f(n) = n**2
            g(n) = nlogn

    Cancel n in both f(n) and g(n). 
            f(n) = n
            g(n) = logn

    f(n) > g(n)